3:I[242,[],""]
5:I[3562,[],""]
6:I[3154,["407","static/chunks/1727213d-ed770260b52092c7.js","192","static/chunks/192-63f0035328ebab3b.js","601","static/chunks/app/error-06967b165f29cafe.js"],"default"]
4:["slug","time-complexity","d"]
0:["rJXjQRmKfE3riak6AR2t7",[[["",{"children":["posts",{"children":[["slug","time-complexity","d"],{"children":["__PAGE__?{\"slug\":\"time-complexity\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["posts",{"children":[["slug","time-complexity","d"],{"children":["__PAGE__",{},[["$L1","$L2",null],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","posts","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/99c43fdd14327af2.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/736bd5ba25105f3a.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$6","errorStyles":[],"errorScripts":[],"template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":["$","main",null,{"children":["$","section",null,{"className":"bg-white","children":["$","div",null,{"className":"layout flex min-h-screen flex-col items-center justify-center text-center text-black","children":[["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 24 24","className":"drop-shadow-glow animate-flicker text-red-500","children":["$undefined",[["$","path","0",{"d":"M4.00001 20V14C4.00001 9.58172 7.58173 6 12 6C16.4183 6 20 9.58172 20 14V20H21V22H3.00001V20H4.00001ZM6.00001 14H8.00001C8.00001 11.7909 9.79087 10 12 10V8C8.6863 8 6.00001 10.6863 6.00001 14ZM11 2H13V5H11V2ZM19.7782 4.80761L21.1924 6.22183L19.0711 8.34315L17.6569 6.92893L19.7782 4.80761ZM2.80762 6.22183L4.22183 4.80761L6.34315 6.92893L4.92894 8.34315L2.80762 6.22183Z","children":[]}]]],"style":{"color":"$undefined"},"height":60,"width":60,"xmlns":"http://www.w3.org/2000/svg"}],["$","h1",null,{"className":"mt-8 text-4xl md:text-6xl","children":"Page Not Found"}],["$","a",null,{"href":"/","children":"Back to home"}]]}]}]}],"notFoundStyles":[]}]}]}]],null],null],["$L7",null]]]]
8:I[9913,["988","static/chunks/34ba9a00-8ebd521ae784f68d.js","574","static/chunks/b2e9d811-b5814f97a31d63ea.js","386","static/chunks/386-12980df3d0e2e1b1.js","192","static/chunks/192-63f0035328ebab3b.js","898","static/chunks/898-c173b3dbe263bab1.js","855","static/chunks/855-be902fd28fe769ab.js","333","static/chunks/app/posts/%5Bslug%5D/page-1919972ba9ee31de.js"],"default"]
9:Tb80,---
title: Time Complexity and Asymptotic Notation
tags: [ "Algorithm" ]
date: 2019-09-01
---

## Why we need Asymptotic Notation

In most of the time, we don't need to calculate the exact computational time for a given algorithm.
For an input that is large enough, the coefficient on the lowest term will have little effect on the overall computational time for the whole algorithm. Therefore, the main trend of computational time is determined by the highest term of the polynomial.

<!--more-->

When we are focusing on how the computational time increases as the scale of input increase, we are calculating the Asymptotic Efficiency of algorithm.

What we do concern is how the running time of algorithm increase as the scale of input increase. In this case, we need to employ the asymptotic notation to help us analyze the time complexity of algorithm.

## $\Theta (g(n))$ | Big-Theta Notation
This notation represents a set of functions that has a **tight** upper bound and lower bound. If a function $f(x)$ is in the set $\Theta (g(n))$, then we know that there exists $n_0$, $c_1$, and $c_2$ such that

$$
c_1 \cdot g(n) \leq f(n) \leq c_2 \cdot g(n) \quad \forall n \geq n_0
$$


## $O(g(n))$ | Big-O Notation
This notation represents a set of functions that has a specific upper bound. If a function $f(x)$ is in the set $O(g(n))$, then we know that there exists a $n_0$ and $c$ such that

$$
0\leq f(n)\leq c\cdot g(n) \quad \forall n \geq n_0
$$

Since the big O notation only specify the upper bound of function, it is a much bigger set than big theta notation. Which means that $\Theta(n) \subseteq O(n)$.

## $\Omega(g(n))$ | Big-Omega Notation
This notation represents a set of functions that has a lower bound. For all function in the set $\Omega(g(n))$, it must satisfy that there exist $c$ and $n_0$ such that

$$
c\cdot g(n) \leq f(n) \quad \forall n \geq n_0
$$


## Amortized Analysis of Time Complexity

The **Amortized Analysis of Time Complexity** is the calculation of average time complexity of an operation.

Example: In Java, the `arrayList` item is in fact a `array`. When it is full, it will copy the elements from original array into a new array with length 1.5 times the original one.

Though it seems to be inefficient and may have a time complexity of $O(n)$ for some situation, the **Average time complexity** of adding an item into the `arrayList` is still $O(1)$.

Suppose reading & writing one element in an array will take time of $c$. Constructing an array of length $n = 1.5^m \cdot k$ will take:

$$
\begin{aligned}
T(n) &= \underbrace{2\sum_{i = 0}^{m}{(1.5)^ik\cdot c}}_{\text{Copy element across arrays}} + \underbrace{(1.5)^m kc}_{\text{Add element into last array}} \\
&= 2ck\cdot \frac{1 - 1.5^m}{1 - 1.5} + 1.5^m kc\\
&= -4ck + 4ck(1.5)^m + (1.5)^m kc\\
&= O(1) + O(n) + O(n)\\
&= O(n) 
\end{aligned}
$$

Therefore, on average, the time it takes to add one element in the array will be $O(1)$.
2:["$","article",null,{"className":"rendered-markdown","children":["$","$L8",null,{"content":"$9"}]}]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Yutian's Blog"}],["$","meta","3",{"name":"description","content":"A place for me to create and share"}],["$","link","4",{"rel":"manifest","href":"/favicon/site.webmanifest","crossOrigin":"use-credentials"}],["$","meta","5",{"name":"robots","content":"index, follow"}],["$","meta","6",{"property":"og:title","content":"Yutian's Blog"}],["$","meta","7",{"property":"og:description","content":"A place for me to create and share"}],["$","meta","8",{"property":"og:url","content":"https://www.yutianchen.blog"}],["$","meta","9",{"property":"og:site_name","content":"Yutian's Blog"}],["$","meta","10",{"property":"og:locale","content":"en_US"}],["$","meta","11",{"property":"og:image","content":"https://www.yutianchen.blog/images/og.jpg"}],["$","meta","12",{"property":"og:type","content":"website"}],["$","meta","13",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","14",{"name":"twitter:title","content":"Yutian's Blog"}],["$","meta","15",{"name":"twitter:description","content":"A place for me to create and share"}],["$","meta","16",{"name":"twitter:image","content":"https://www.yutianchen.blog/images/og.jpg"}],["$","link","17",{"rel":"shortcut icon","href":"/favicon/favicon-16x16.png"}],["$","link","18",{"rel":"icon","href":"/favicon/favicon.ico"}],["$","link","19",{"rel":"apple-touch-icon","href":"/favicon/apple-touch-icon.png"}]]
1:null
